<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"

	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache.xsd
	http://cxf.apache.org/jaxrs
	http://cxf.apache.org/schemas/jaxrs.xsd
	http://cxf.apache.org/jaxws
	http://cxf.apache.org/schemas/jaxws.xsd 
	http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
	">

	<!-- 数据源配置 -->
	<!-- Druid连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="testWhileIdle" value="true" />

		<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->

		<property name="defaultAutoCommit" value="true" />

		<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		<property name="validationQuery" value="select 1 " />
		<property name="filters" value="stat" />
		<property name="proxyFilters">
			<list>
				<ref bean="logFilter" />
			</list>
		</property>
	</bean>
	
	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="statementExecutableSqlLogEnable" value="false" />
	</bean>
	
	<!-- 事务配置 开始 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
	</bean>
	<!-- 事务配置 结束 -->

	<!-- 在基本的 MyBatis 中,session 工厂可以使用 SqlSessionFactoryBuilder 来创建。
		而在 MyBatis-spring 中,则使用 SqlSessionFactoryBean 来替代。
 	-->
 	<!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置--> 
    <!-- 定义 myBatis的sqlSessionFactory      
    1、当使用MapperScannerConfigurer时不需要configLocation定义    
        1：mapperLocations也可以批量载入mapper，但是MapperScannerConfigurer扫描mapper后不会将已存在的mapper加入到Configuration中     
        2：也可以定义configLocation文件，在里面设置settings和typeAliases等来覆写默认的配置     
        3：如果使用了configLocation文件，并且里面也定义了mappers，那么在MapperScannerConfigurer扫描动作中就不会加入已经存在的mapper了     
            （同mapperLocations情况一样）     
        4：综上所述：建议采用扫描来完成mapper的注册，并且在sqlSessionFactory的bean配置中不需要设置mapperLocations，     
            如果设置了configLocation文件，那么configLocation文件里也不需要再设置mapper了     
    --> 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis/*Mapper.xml</value>
			</list>
		</property>
		<property name="plugins">
			<list>
				<!-- 分页插件 -->
				<bean
					class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor">
					<property name="dialectClass"
						value="com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect"></property>
				</bean>
			</list>
		</property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<!-- 
		这个配置项缺省使用了一个名字叫 cacheManager 的缓存管理器，这个缓存管理器有一个 spring 的缺省实现，
		即 org.springframework.cache.support.SimpleCacheManager，这个缓存管理器实现了我们刚刚自定义的缓存管理器的逻辑，
		它需要配置一个属性 caches，即此缓存管理器管理的缓存集合，除了缺省的名字叫 default 的缓存，
		我们还自定义了一个名字叫 accountCache 的缓存，使用了缺省的内存存储方案 ConcurrentMapCacheFactoryBean，
		它是基于 java.util.concurrent.ConcurrentHashMap 的一个内存缓存实现方案。
	 -->
	<cache:annotation-driven cache-manager="cacheManager"
		proxy-target-class="true" />
	<!--spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器 -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<!-- 此处类concurrentMapCacheFactoryBean的作用是产生 缓存类 实例-->
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="default" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="andCache" />
			</set>
		</property>
	</bean>
	<!-- @Cacheable 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存
		 @CachePut 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用
		 @CachEvict 主要针对方法配置，能够根据一定的条件对缓存进行清空 -->
	<!-- Jedis ConnectionFactory <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> 
		<constructor-arg name="sentinelConfig" ref="redisSentinelConfiguration"/> 
		<constructor-arg name="poolConfig" ref="poolConfig"/> </bean> <bean id="poolConfig" 
		class="redis.clients.jedis.JedisPoolConfig"> <property name="maxIdle" value="${redis.pool.maxIdle}" 
		/> <property name="maxTotal" value="${redis.pool.maxTotal}" /> <property 
		name="minIdle" value="${redis.pool.minIdle}" /> </bean> <bean id="redisConfig" 
		class="org.springframework.core.env.MapPropertySource"> <constructor-arg 
		index="0"> <value>redisConfig</value> </constructor-arg> <constructor-arg 
		index="1"> <map> <entry key="spring.redis.sentinel.master" value="${redis.sentinel.master}" 
		/> <entry key="spring.redis.sentinel.nodes" value="${redis.sentinel.nodes}" 
		/> </map> </constructor-arg> </bean> <bean id="redisSentinelConfiguration" 
		class="org.springframework.data.redis.connection.RedisSentinelConfiguration"> 
		<constructor-arg index="0" name="propertySource"> <ref bean="redisConfig"/> 
		</constructor-arg> </bean> -->
	<!-- redis template definition <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" 
		/> <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
		<property name="connectionFactory" ref="jedisConnectionFactory"/> <property 
		name="keySerializer" ref="stringRedisSerializer"/> </bean> -->
	<!-- declare Redis Cache Manager <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"> 
		<constructor-arg index="0"> <ref bean="redisTemplate"/> </constructor-arg> 
		<property name="defaultExpiration" value="300"/> <property name="expires"> 
		<map> <entry key="roles" value="1000" /> </map> </property> </bean> -->
		
	    <!-- swagger -->
	<bean class="com.tasly.deepureflow.util.SwaggerConfig"/>
</beans>